[{"title":"Error","type":0,"sectionRef":"#","url":"/PathEZ/api/Error","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Error","url":"/PathEZ/api/Error#types","content":" "},{"title":"Error​","type":1,"pageTitle":"Error","url":"/PathEZ/api/Error#Error","content":"&lt;/&gt; interface Error { Agent: Model -- agent, who caused an error errorType: string | Enum errorMessage: string-- description of an error } Errors are fired using Sleitnick's Signal API. "},{"title":"Properties​","type":1,"pageTitle":"Error","url":"/PathEZ/api/Error#properties","content":" "},{"title":"Errored​","type":1,"pageTitle":"Error","url":"/PathEZ/api/Error#Errored","content":"&lt;/&gt; Error.Errored: Signal A signal connection to handle errors from agents. local PathEZ = require(game:GetService(&quot;ReplicatedStorage&quot;).Packages.PathEZ) function errorHandler(error: PathEZ.Error) if error.Agent.Name == &quot;Oleg&quot; and error.errorType == Enum.PathStatus.NoPath then print(&quot;Oleg can't reach the target&quot;) end end PathEZ.Errored:Connect(errorHandler) info This signal connection will provide errors from ALL agents initialized in the same script. This means you have to filter errors by agent to handle errors from a specific agent. Or have a separate script for each agent, what is harmful for perfomance. More info about Signals API. "},{"title":"PathEZ","type":0,"sectionRef":"#","url":"/PathEZ/api/PathEZ","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#types","content":" "},{"title":"PathEZPath​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#PathEZPath","content":"&lt;/&gt; interface PathEZPath { Agent: Model GeneratedPath: Path IsMoving: boolean } Object returned by PathEZ constructor.  "},{"title":"ComputationSettings​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#ComputationSettings","content":"&lt;/&gt; interface ComputationSettings { TimeBetweenCompute: number-- How much time to wait before next ComputeAsync } TimeBetweenCompute default value is 0.07 seconds. note To override the defaults provide new ComputationSettings, when calling a constructor.  "},{"title":"MoveSettings​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#MoveSettings","content":"&lt;/&gt; interface MoveSettings { ignoreNoPathError: boolean-- ignores computation errors when agent is trying to follow a target visualizePaths: boolean } ignoreNoPathError default value is false. visualizePaths default value is false. note To override the defaults provide new MoveSettings, when calling Move functions. "},{"title":"Properties​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#properties","content":" "},{"title":"IsMoving​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#IsMoving","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PathEZ.IsMoving: boolean Property of PathEZPath, indicates whether Agent is moving or not. "},{"title":"Functions​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#functions","content":" "},{"title":"new​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#new","content":"Constructor &lt;/&gt; PathEZ.new( agent: Model , agentParams: AgentParameters?, computationSettings: ComputationSettings? ) → PathEZPath Constructor of a PathEZPath note Accepts Roblox's AgentParameters as a second argument and custom computation settings as third or default one will be used.  "},{"title":"GetNearestPlayer​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#GetNearestPlayer","content":"Useful Function &lt;/&gt; PathEZ.GetNearestPlayer( position: Vector3 , players: {Players }?, predicate: ((Player ) → boolean)? ) → Player  Gets the nearest player from Postion out of provided players or uses game:GetService(&quot;Players&quot;):GetChildren(). info Accepts predicate function to check on players as the third argument.  "},{"title":"ComputeAndGetWaypoints​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#ComputeAndGetWaypoints","content":"&lt;/&gt; PathEZ.ComputeAndGetWaypoints( path: Path , startPoint: Vector3 , finishPoint: Vector3 ) → Promise Computes waypoints for a given path. Technically a wrapper for PathfindingService's ComputeAsync and GetWaypoints, but provide async functionality via Promises. local path = PathEZ.new(agent) local start = Vector3.new(0,0,0) local finish = player.Character.Position --first value from await() is promise's Status, so we ignore it PathEZ.ComputeAndGetWaypoints(path.GeneratedPath, start, finish) :andThen(function(waypoints) for _, waypoint in waypoints do doSomething(waypoint) end end):catch(warn) Useful, when you don't want your main function to yield during computation process. info Retruns a promise, which resolves with computed waypoints or rejects with a NoPath errorType. More info about Promise API.  "},{"title":"MoveTo​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#MoveTo","content":"Move Function &lt;/&gt; PathEZ:MoveTo( place: Vector3 | Model | BasePart , moveSettings: MoveSettings? ) → () Move agent to a given place. Place will be automatically converted to Vector3. local path = PathEZ.new(agent) local character = player.Character path:MoveTo(character) note Accepts MoveSettings as a second parameter or default will be used.  "},{"title":"Follow​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#Follow","content":"Move Function &lt;/&gt; PathEZ:Follow( target: Player | Model | BasePart , moveSettings: MoveSettings? ) → () Makes agent follow a target. local path = PathEZ.new(agent) path:Follow(player) note Accepts MoveSettings as a second parameter or default will be used.  "},{"title":"StopFollowing​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#StopFollowing","content":"&lt;/&gt; PathEZ:StopFollowing() → IsMoving Stops agent from following a target. local path = PathEZ.new(agent) path:Follow(player) task.wait(6) path:StopFollowing() info Call this function before destroying a PathEZPath.  "},{"title":"GetNearestPlayer​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#GetNearestPlayer","content":"&lt;/&gt; PathEZ:GetNearestPlayer( players: {Players }?, predicate: (Player ) → boolean ) → Player  Same as PathEZ.GetNearestPlayer, except it is a method for PathEZPath. Uses Agent's position as a postion to check from. info Accepts predicate function to check on players as the third argument.  "},{"title":"Destroy​","type":1,"pageTitle":"PathEZ","url":"/PathEZ/api/PathEZ#Destroy","content":"&lt;/&gt; PathEZ:Destroy() → () Destroys a PathEZPath local path = PathEZ.new(agent) path:Follow(player) task.wait(6) path:StopFollowing() path:Destroy() caution Automatically stops agent from following a target. But this behavior is not guaranteed and reliable. So call externally StopFollowing() before calling Destroy() "}]