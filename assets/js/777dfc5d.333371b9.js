"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79],{21211:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructor of a PathEZPath\\n\\n:::note\\n\\nAccepts Roblox\'s AgentParameters as a second argument and custom computation settings as third or default one will be used.\\n\\n:::","params":[{"name":"agent","desc":"","lua_type":"Model"},{"name":"agentParams","desc":"","lua_type":"AgentParameters?"},{"name":"computationSettings","desc":"","lua_type":"ComputationSettings?"}],"returns":[{"desc":"","lua_type":"PathEZPath"}],"function_type":"static","tags":["Constructor"],"source":{"line":149,"path":"PathEZ/init.lua"}},{"name":"GetNearestPlayer","desc":"Gets the nearest player from Postion out of provided players or uses `game:GetService(\\"Players\\"):GetChildren()`.\\n\\n:::info\\n\\nAccepts predicate function to check on players as the third argument.\\n\\n:::","params":[{"name":"position","desc":"","lua_type":"Vector3"},{"name":"players","desc":"","lua_type":"{ Players }?"},{"name":"predicate","desc":"","lua_type":"((Player) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Player\\r\\n"}],"function_type":"static","tags":["Useful Function"],"source":{"line":179,"path":"PathEZ/init.lua"}},{"name":"ComputeAndGetWaypoints","desc":"Computes waypoints for a given path.\\n\\nTechnically a wrapper for PathfindingService\'s ComputeAsync and GetWaypoints, but provide async functionality via Promises.\\n\\n```lua\\nlocal path = PathEZ.new(agent)\\n\\nlocal start = Vector3.new(0,0,0)\\nlocal finish = player.Character.Position\\n\\n--first value from await() is promise\'s Status, so we ignore it\\nPathEZ.ComputeAndGetWaypoints(path.GeneratedPath, start, finish)\\n\\t:andThen(function(waypoints)\\n\\t\\tfor _, waypoint in waypoints do\\n\\t\\t\\tdoSomething(waypoint)\\n\\t\\tend\\n\\tend):catch(warn)\\n```\\nUseful, when you don\'t want your main function to yield during computation process.\\n\\n:::info\\n\\nRetruns a promise, which resolves with computed waypoints or rejects with a NoPath errorType.\\n\\n:::\\n\\nMore info about [Promise](https://eryn.io/roblox-lua-promise/api/Promise) API.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"startPoint","desc":"","lua_type":"Vector3"},{"name":"finishPoint","desc":"","lua_type":"Vector3"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":227,"path":"PathEZ/init.lua"}},{"name":"MoveTo","desc":"Move agent to a given place. Place will be automatically converted to `Vector3`.\\n\\n```lua\\nlocal path = PathEZ.new(agent)\\n\\nlocal character = player.Character\\n\\npath:MoveTo(character)\\n```\\n\\n:::note\\n\\nAccepts MoveSettings as a second parameter or default will be used.\\n\\n:::","params":[{"name":"place","desc":"","lua_type":"Vector3 | Model | BasePart"},{"name":"moveSettings","desc":"","lua_type":"MoveSettings?"}],"returns":[],"function_type":"method","tags":["Move Function"],"source":{"line":266,"path":"PathEZ/init.lua"}},{"name":"Follow","desc":"Makes agent follow a target.\\n\\n```lua\\nlocal path = PathEZ.new(agent)\\n\\npath:Follow(player)\\n```\\n\\n:::note\\n\\nAccepts MoveSettings as a second parameter or default will be used.\\n\\n:::","params":[{"name":"target","desc":"","lua_type":"Player | Model | BasePart"},{"name":"moveSettings","desc":"","lua_type":"MoveSettings?"}],"returns":[],"function_type":"method","tags":["Move Function"],"source":{"line":343,"path":"PathEZ/init.lua"}},{"name":"StopFollowing","desc":"Stops agent from following a target.\\n\\n```lua\\nlocal path = PathEZ.new(agent)\\n\\npath:Follow(player)\\ntask.wait(6)\\npath:StopFollowing()\\n```\\n\\n:::info\\n\\nCall this function before destroying a PathEZPath.\\n\\n:::","params":[],"returns":[{"desc":"","lua_type":"IsMoving"}],"function_type":"method","source":{"line":386,"path":"PathEZ/init.lua"}},{"name":"GetNearestPlayer","desc":"Same as [PathEZ.GetNearestPlayer], except it is a method for [PathEZPath].\\n\\nUses Agent\'s position as a postion to check from.\\n\\n:::info\\n\\nAccepts predicate function to check on players as the third argument.\\n\\n:::","params":[{"name":"players","desc":"","lua_type":"{ Players }?"},{"name":"predicate","desc":"","lua_type":"(Player) -> boolean"}],"returns":[{"desc":"","lua_type":"Player\\r\\n"}],"function_type":"method","source":{"line":407,"path":"PathEZ/init.lua"}},{"name":"Destroy","desc":"Destroys a PathEZPath\\n\\n```lua\\nlocal path = PathEZ.new(agent)\\n\\npath:Follow(player)\\ntask.wait(6)\\npath:StopFollowing()\\npath:Destroy()\\n```\\n\\n:::caution\\n\\nAutomatically stops agent from following a target. But this behavior is not guaranteed and reliable.\\n\\nSo call externally StopFollowing() before calling Destroy()\\n\\n:::","params":[],"returns":[],"function_type":"method","source":{"line":432,"path":"PathEZ/init.lua"}}],"properties":[{"name":"IsMoving","desc":"Property of [PathEZPath], indicates whether Agent is moving or not.","lua_type":"boolean","readonly":true,"source":{"line":24,"path":"PathEZ/init.lua"}}],"types":[{"name":"PathEZPath","desc":"Object returned by PathEZ constructor.","fields":[{"name":"Agent","lua_type":"Model","desc":""},{"name":"GeneratedPath","lua_type":"Path","desc":""},{"name":"IsMoving","lua_type":"boolean","desc":""}],"source":{"line":16,"path":"PathEZ/init.lua"}},{"name":"ComputationSettings","desc":"- `TimeBetweenCompute` default value is `0.07` seconds.\\n\\n:::note\\n\\nTo override the defaults provide new `ComputationSettings`, when calling a constructor.\\n\\n:::","fields":[{"name":"TimeBetweenCompute","lua_type":"number","desc":"How much time to wait before next ComputeAsync"}],"source":{"line":39,"path":"PathEZ/init.lua"}},{"name":"MoveSettings","desc":"- `ignoreNoPathError` default value is `false`.\\n- `visualizePaths` default value is `false`.\\n\\n:::note\\n\\nTo override the defaults provide new `MoveSettings`, when calling Move functions.\\n\\n:::","fields":[{"name":"ignoreNoPathError","lua_type":"boolean","desc":"ignores computation errors when agent is trying to follow a target"},{"name":"visualizePaths","lua_type":"boolean","desc":""}],"source":{"line":59,"path":"PathEZ/init.lua"}}],"name":"PathEZ","desc":"PathEZ provides an easy access to PathfindingService using [Promises](https://eryn.io/roblox-lua-promise/api/Promise) and [Sleitnick\'s Signals](https://sleitnick.github.io/RbxUtil/api/Signal) APIs.","source":{"line":91,"path":"PathEZ/init.lua"}}')}}]);